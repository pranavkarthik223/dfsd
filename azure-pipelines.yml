# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'ARM-WIF-Automatic-APK'
    ScriptType: 'InlineScript'
    Inline: |
      $triggerNames = @("Trigger 1","Trigger 2")
       
      # Retrieve all triggers from the specified Synapse workspace
      $triggersSynapse = Get-AzSynapseTrigger -WorkspaceName "apk"
       
      # Loop through the list of trigger names and stop each one
      $triggerNames | ForEach-Object {
          $triggerName = $_  # The current trigger name in the loop
          $trigger = $triggersSynapse | Where-Object { $_.Name -eq $triggerName }
      
          if ($trigger) {
      		write-host "$trigger.Name"
              Stop-AzSynapseTrigger -WorkspaceName "apk" -Name $trigger.Name
              Write-Host "Stopped trigger: $($trigger.Name)"
          } else {
              Write-Host "Trigger '$($_)' not found in the workspace."
          }
      }
    azurePowerShellVersion: 'LatestVersion'
  displayName: 'stop Synapse triggers'

- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'ARM-WIF-Automatic-APK'
    ScriptType: 'InlineScript'
    Inline: |
      $triggerNames = @("Trigger 1","Trigger 2")
       
      # Retrieve all triggers from the specified Synapse workspace
      $triggersSynapse = Get-AzSynapseTrigger -WorkspaceName "apk"
       
      # Loop through the list of trigger names and stop each one
      $triggerNames | ForEach-Object {
          $triggerName = $_  # The current trigger name in the loop
          $trigger = $triggersSynapse | Where-Object { $_.Name -eq $triggerName }
      
          if ($trigger) {
      		write-host "$trigger.Name"
              Start-AzSynapseTrigger -WorkspaceName "apk" -Name $trigger.Name
              Write-Host "Stopped trigger: $($trigger.Name)"
          } else {
              Write-Host "Trigger '$($_)' not found in the workspace."
          }
      }
    azurePowerShellVersion: 'LatestVersion'
  displayName: 'start Synapse triggers'
